
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import Analizadores.ErrorCom;
import Objetos.Programa;
import Objetos.Procedimiento;
import Objetos.Instruccion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCompilar extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCompilar() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCompilar(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCompilar(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\012\002\000\002\002" +
    "\007\000\002\013\002\000\002\003\013\000\002\003\005" +
    "\000\002\014\002\000\002\006\005\000\002\015\002\000" +
    "\002\007\006\000\002\007\002\000\002\016\002\000\002" +
    "\011\005\000\002\017\002\000\002\011\005\000\002\011" +
    "\002\000\002\020\002\000\002\010\006\000\002\021\002" +
    "\000\002\010\006\000\002\010\002\000\002\022\002\000" +
    "\002\004\011\000\002\004\002\000\002\023\002\000\002" +
    "\005\010\000\002\024\002\000\002\005\014\000\002\025" +
    "\002\000\002\005\010\000\002\026\002\000\002\005\010" +
    "\000\002\027\002\000\002\005\011\000\002\005\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\004\005\001\002\000\004\002\112\001" +
    "\002\000\004\017\006\001\002\000\006\005\000\016\000" +
    "\001\002\000\006\005\010\016\011\001\002\000\004\017" +
    "\064\001\002\000\006\006\uffdf\017\014\001\002\000\004" +
    "\006\013\001\002\000\004\002\uffff\001\002\000\006\010" +
    "\020\012\017\001\002\000\004\006\016\001\002\000\004" +
    "\006\ufffc\001\002\000\006\007\043\015\044\001\002\000" +
    "\010\011\uffe1\017\uffe1\020\uffe1\001\002\000\010\011\ufff2" +
    "\017\023\020\022\001\002\000\006\011\ufff4\014\ufff4\001" +
    "\002\000\006\011\ufff6\014\ufff6\001\002\000\004\011\025" +
    "\001\002\000\004\013\026\001\002\000\006\006\uffdf\017" +
    "\014\001\002\000\004\006\uffe0\001\002\000\006\011\uffed" +
    "\014\032\001\002\000\004\011\ufff5\001\002\000\006\017" +
    "\034\020\033\001\002\000\006\011\uffef\014\uffef\001\002" +
    "\000\006\011\ufff1\014\ufff1\001\002\000\006\011\uffed\014" +
    "\032\001\002\000\004\011\ufff0\001\002\000\006\011\uffed" +
    "\014\032\001\002\000\004\011\uffee\001\002\000\006\011" +
    "\uffed\014\032\001\002\000\004\011\ufff3\001\002\000\004" +
    "\013\061\001\002\000\006\017\045\020\046\001\002\000" +
    "\006\010\uffe7\013\uffe3\001\002\000\004\013\uffe5\001\002" +
    "\000\004\013\050\001\002\000\004\006\uffe4\001\002\000" +
    "\004\010\054\001\002\000\004\013\053\001\002\000\004" +
    "\006\uffe2\001\002\000\010\011\ufff2\017\023\020\022\001" +
    "\002\000\004\011\056\001\002\000\004\013\057\001\002" +
    "\000\006\006\uffdf\017\014\001\002\000\004\006\uffe6\001" +
    "\002\000\006\006\uffe9\017\uffe9\001\002\000\006\006\uffdf" +
    "\017\014\001\002\000\004\006\uffe8\001\002\000\004\010" +
    "\ufffe\001\002\000\004\010\066\001\002\000\004\017\067" +
    "\001\002\000\006\011\ufffb\014\ufffb\001\002\000\004\011" +
    "\071\001\002\000\006\006\uffea\017\072\001\002\000\004" +
    "\010\uffec\001\002\000\004\006\074\001\002\000\006\005" +
    "\010\016\011\001\002\000\004\006\ufffd\001\002\000\004" +
    "\010\077\001\002\000\010\011\ufff2\017\023\020\022\001" +
    "\002\000\004\011\101\001\002\000\004\013\102\001\002" +
    "\000\006\006\uffea\017\072\001\002\000\004\006\uffeb\001" +
    "\002\000\006\011\ufff7\014\105\001\002\000\004\017\107" +
    "\001\002\000\004\011\ufffa\001\002\000\006\011\ufff9\014" +
    "\ufff9\001\002\000\006\011\ufff7\014\105\001\002\000\004" +
    "\011\ufff8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\006\001\001\000\004\003\011" +
    "\001\001\000\002\001\001\000\004\005\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\020\001\001\000\004\011\023\001\001\000\004\017\040" +
    "\001\001\000\004\016\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\026\001\001\000\002\001\001" +
    "\000\004\010\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\036\001\001\000\004\020\034\001\001" +
    "\000\004\010\035\001\001\000\002\001\001\000\004\010" +
    "\037\001\001\000\002\001\001\000\004\010\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\050\026\051\001\001\000\004\025\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\057\001" +
    "\001\000\002\001\001\000\004\023\061\001\001\000\004" +
    "\005\062\001\001\000\002\001\001\000\004\013\064\001" +
    "\001\000\002\001\001\000\004\006\067\001\001\000\004" +
    "\014\103\001\001\000\002\001\001\000\004\004\072\001" +
    "\001\000\004\022\075\001\001\000\002\001\001\000\004" +
    "\003\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\102\001\001\000\002\001\001\000\004\007" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\107\001\001\000\004\007\110\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCompilar$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCompilar$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCompilar$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<ErrorCom> erroresCom;  
    private Programa programa;
    private Procedimiento procedimientoAct;
    private Instruccion instruccionAct;

	public ParserCompilar(LexerCompilar lex) {
		super(lex);        
        this.erroresCom = lex.getErroresCom();    
	}

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        erroresCom.add(new ErrorCom("Sintactico","No se esperaba Componente",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        erroresCom.add(new ErrorCom("Sintactico","Error sintactico Irrecuperable",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }         
    /*---------Getters & Setters---------*/

    public List<ErrorCom> getErroresCom(){
        return this.erroresCom;
    }

    public Programa getPrograma(){
        return this.programa;
    }

    private void crearPrograma(String nombre){
        this.programa = new Programa();
        this.programa.setNombre(nombre);
    }

    private void crearProcedimiento(String nombre){
        this.procedimientoAct = new Procedimiento();
        this.procedimientoAct.setNombre(nombre);      
        this.programa.insertarProcedimiento(this.procedimientoAct);           
    }

    private void agregarParamProc(String val){
        this.procedimientoAct.insertarParametro(val);
    }    

    private void agregarInstruccionProc(String nomb){
        this.instruccionAct = new Instruccion();
        instruccionAct.setTipo("funcion");
        instruccionAct.setEsAsgFun(true);
        instruccionAct.setFuncion(nomb);
        this.procedimientoAct.insertarInstruccion(this.instruccionAct);
    }

    private void insertarParamInstruccion(String val){
        this.instruccionAct.insertarParametro(val);
    }

    private void insertarAsignacion(String tipo, String nombre){
        this.instruccionAct = new Instruccion();        
        this.instruccionAct.setVariable(nombre);
        instruccionAct.setTipo(tipo);        
        if(tipo.equals("funcion")){
            this.instruccionAct.setEsAsgFun(true);
        }
        this.programa.insertarInstruccion(this.instruccionAct);
    }

    private void insertarFuncionInstruccion2(String nomb){
        this.instruccionAct = new Instruccion(); 
        instruccionAct.setTipo("funcion");
        this.instruccionAct.setFuncion(nomb);
        this.instruccionAct.setEsAsgFun(true);
        this.programa.insertarInstruccion(this.instruccionAct);
    }

    private void insertarFuncionInstruccion(String nomb){
        this.instruccionAct.setFuncion(nomb);
        this.instruccionAct.setEsAsgFun(true);
    }

    private void insertarValInstruccion(String val){
        this.instruccionAct.insertarValor(val);
    }    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCompilar$actions {
  private final ParserCompilar parser;

  /** Constructor */
  CUP$ParserCompilar$actions(ParserCompilar parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCompilar$do_action_part00000000(
    int                        CUP$ParserCompilar$act_num,
    java_cup.runtime.lr_parser CUP$ParserCompilar$parser,
    java.util.Stack            CUP$ParserCompilar$stack,
    int                        CUP$ParserCompilar$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCompilar$result;

      /* select the action based on the action number */
      switch (CUP$ParserCompilar$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		RESULT = start_val;
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCompilar$parser.done_parsing();
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearPrograma(nom);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$0",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= PROGRAMA ID NT$0 sig END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearProcedimiento(nom);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$1",9, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sig ::= PROCEDIMIENTO ID NT$1 PARI param PARD sig2 END sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-7)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-7)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-7)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sig ::= BEGIN sig3 END 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
agregarParamProc(val);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$2",10, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // param ::= ID NT$2 paramp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
agregarParamProc(val);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$3",11, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // paramp ::= COMA ID NT$3 paramp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("paramp",5, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // paramp ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("paramp",5, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarParamInstruccion(val);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$4",12, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param2 ::= ID NT$4 param2p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("param2",7, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarParamInstruccion(val);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$5",13, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param2 ::= NUM NT$5 param2p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("param2",7, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param2 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("param2",7, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$6 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarParamInstruccion(val);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$6",14, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param2p ::= COMA ID NT$6 param2p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("param2p",6, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$7 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarParamInstruccion(val);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$7",15, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param2p ::= COMA NUM NT$7 param2p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("param2p",6, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param2p ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("param2p",6, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$8 ::= 
            {
              Object RESULT =null;
		int nombleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
agregarInstruccionProc(nomb);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$8",16, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sig2 ::= ID NT$8 PARI param2 PARD PUNTCOMA sig2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("sig2",2, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sig2 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("sig2",2, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$9 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
insertarAsignacion("declaracion",nom);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$9",17, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sig3 ::= ID DOSPUNT INTEGER PUNTCOMA NT$9 sig3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("sig3",3, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$10 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int nom2left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nom2right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom2 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarAsignacion("asgFunc",nom);insertarFuncionInstruccion(nom2);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$10",18, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sig3 ::= ID DOSPUNT IGUAL ID NT$10 PARI param2 PARD PUNTCOMA sig3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).value;
		int nom2left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int nom2right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		String nom2 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("sig3",3, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$11 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarAsignacion("asignacion",nom);insertarValInstruccion(val);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$11",19, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sig3 ::= ID DOSPUNT IGUAL NUM NT$11 PUNTCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("sig3",3, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$12 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarAsignacion("asignacion",nom);insertarValInstruccion(val);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$12",20, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sig3 ::= ID DOSPUNT IGUAL ID NT$12 PUNTCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("sig3",3, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$13 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
insertarFuncionInstruccion2(nom);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$13",21, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sig3 ::= ID PARI NT$13 param2 PARD PUNTCOMA sig3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("sig3",3, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sig3 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("sig3",3, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCompilar$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCompilar$do_action(
    int                        CUP$ParserCompilar$act_num,
    java_cup.runtime.lr_parser CUP$ParserCompilar$parser,
    java.util.Stack            CUP$ParserCompilar$stack,
    int                        CUP$ParserCompilar$top)
    throws java.lang.Exception
    {
              return CUP$ParserCompilar$do_action_part00000000(
                               CUP$ParserCompilar$act_num,
                               CUP$ParserCompilar$parser,
                               CUP$ParserCompilar$stack,
                               CUP$ParserCompilar$top);
    }
}

}
